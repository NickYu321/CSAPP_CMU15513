0x000000000040291b <+0>:     sub    $0x78,%rsp
   0x000000000040291f <+4>:     mov    %fs:0x28,%rax
   0x0000000000402928 <+13>:    mov    %rax,0x68(%rsp)
   0x000000000040292d <+18>:    xor    %eax,%eax
   0x000000000040292f <+20>:    mov    %rsp,%rsi
   0x0000000000402932 <+23>:    call   0x403592 <read_six_numbers>   #读六个数，保存到rsp
# 步骤1：判断输入的每个数是否不超过6，且任意两个数都不相等
   0x0000000000402937 <+28>:    mov    $0x0,%ecx
   0x000000000040293c <+33>:    cmp    $0x5,%rcx
   0x0000000000402940 <+37>:    jg     0x402973 <phase_6+88>
   0x0000000000402942 <+39>:    mov    (%rsp,%rcx,8),%rdx
   0x0000000000402946 <+43>:    lea    -0x1(%rdx),%rax
   0x000000000040294a <+47>:    cmp    $0x5,%rax
   0x000000000040294e <+51>:    ja     0x402959 <phase_6+62>
   0x0000000000402950 <+53>:    add    $0x1,%rcx
   0x0000000000402954 <+57>:    mov    %rcx,%rax
   0x0000000000402957 <+60>:    jmp    0x402962 <phase_6+71>
   0x0000000000402959 <+62>:    call   0x40355e <explode_bomb>
   0x000000000040295e <+67>:    add    $0x1,%rax
   0x0000000000402962 <+71>:    cmp    $0x5,%rax
   0x0000000000402966 <+75>:    jg     0x40293c <phase_6+33>
   0x0000000000402968 <+77>:    cmp    (%rsp,%rax,8),%rdx
   0x000000000040296c <+81>:    jne    0x40295e <phase_6+67>
   0x000000000040296e <+83>:    call   0x40355e <explode_bomb>
# 步骤2：对于每个输入的整数，做这样的转换：用7减去这个整数的值替换原来的数
   0x0000000000402973 <+88>:    mov    $0x0,%eax
   0x0000000000402978 <+93>:    jmp    0x40298b <phase_6+112>
   0x000000000040297a <+95>:    mov    $0x7,%edx
   0x000000000040297f <+100>:   sub    (%rsp,%rax,8),%rdx
   0x0000000000402983 <+104>:   mov    %rdx,(%rsp,%rax,8)
   0x0000000000402987 <+108>:   add    $0x1,%rax
   0x000000000040298b <+112>:   cmp    $0x5,%rax
   0x000000000040298f <+116>:   jle    0x40297a <phase_6+95>
# 步骤3：0x407260处表示一个包含6个节点的链表， 对于经过步骤2之后转换的每个整数i, 取链表第i个节点的value，依次保存在(%rsp + 32)处
   0x0000000000402991 <+118>:   mov    $0x0,%ecx
   0x0000000000402996 <+123>:   jmp    0x4029a1 <phase_6+134>
   0x0000000000402998 <+125>:   mov    %rdx,0x30(%rsp,%rcx,8)
   0x000000000040299d <+130>:   add    $0x1,%rcx
   0x00000000004029a1 <+134>:   cmp    $0x5,%rcx
   0x00000000004029a5 <+138>:   jg     0x4029c3 <phase_6+168>
   0x00000000004029a7 <+140>:   mov    $0x1,%eax
   0x00000000004029ac <+145>:   lea    0x48ad(%rip),%rdx        # 0x407260 <node1>
=> 0x00000000004029b3 <+152>:   cmp    %rax,(%rsp,%rcx,8)
   0x00000000004029b7 <+156>:   jle    0x402998 <phase_6+125>
   0x00000000004029b9 <+158>:   mov    0x10(%rdx),%rdx
   0x00000000004029bd <+162>:   add    $0x1,%rax
   0x00000000004029c1 <+166>:   jmp    0x4029b3 <phase_6+152>
   0x00000000004029c3 <+168>:   mov    0x30(%rsp),%rax
   0x00000000004029c8 <+173>:   mov    %rax,%rsi
   0x00000000004029cb <+176>:   mov    $0x1,%edx
   0x00000000004029d0 <+181>:   jmp    0x4029e2 <phase_6+199>
   0x00000000004029d2 <+183>:   mov    0x30(%rsp,%rdx,8),%rcx
   0x00000000004029d7 <+188>:   mov    %rcx,0x10(%rsi)
   0x00000000004029db <+192>:   add    $0x1,%rdx
   0x00000000004029df <+196>:   mov    %rcx,%rsi
   0x00000000004029e2 <+199>:   cmp    $0x5,%rdx
   0x00000000004029e6 <+203>:   jle    0x4029d2 <phase_6+183>
   # 4.判断（%rsp + 16）处的6个整数是否为降序排列，如不满足条件引爆炸弹
   0x00000000004029e8 <+205>:   movq   $0x0,0x10(%rsi)
   0x00000000004029f0 <+213>:   mov    $0x0,%edx
   0x00000000004029f5 <+218>:   cmp    $0x4,%rdx
   0x00000000004029f9 <+222>:   jg     0x402a12 <phase_6+247>
   0x00000000004029fb <+224>:   mov    (%rax),%rcx
   0x00000000004029fe <+227>:   mov    0x10(%rax),%rax
   0x0000000000402a02 <+231>:   cmp    (%rax),%rcx
   0x0000000000402a05 <+234>:   jl     0x402a0d <phase_6+242>
   0x0000000000402a07 <+236>:   add    $0x1,%rdx
   0x0000000000402a0b <+240>:   jmp    0x4029f5 <phase_6+218>
   0x0000000000402a0d <+242>:   call   0x40355e <explode_bomb>
   0x0000000000402a12 <+247>:   mov    0x68(%rsp),%rax
   0x0000000000402a17 <+252>:   sub    %fs:0x28,%rax
   0x0000000000402a20 <+261>:   jne    0x402a27 <phase_6+268>
   0x0000000000402a22 <+263>:   add    $0x78,%rsp
   0x0000000000402a26 <+267>:   ret
   0x0000000000402a27 <+268>:   call   0x402120 <__stack_chk_fail@plt>
